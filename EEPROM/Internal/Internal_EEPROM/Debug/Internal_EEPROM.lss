
Internal_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000230  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ce  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000679  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041f  00000000  00000000  000011e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000387  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000108  00000000  00000000  00001a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <EEPROM_writeByte>:
#include "internal_eeprom.h"

void EEPROM_writeByte(uint16_t address , uint8_t data) {
	
	/* Check for address as it must not exceed 511 and not be negative */
	if (address >= 0 && address <= 511 )
  7c:	81 15       	cp	r24, r1
  7e:	22 e0       	ldi	r18, 0x02	; 2
  80:	92 07       	cpc	r25, r18
  82:	60 f4       	brcc	.+24     	; 0x9c <EEPROM_writeByte+0x20>
	{
		/* Wait for completion of previous write */
		while(BIT_IS_SET(EECR,EEWE));
  84:	e1 99       	sbic	0x1c, 1	; 28
  86:	fe cf       	rjmp	.-4      	; 0x84 <EEPROM_writeByte+0x8>
		
		/* Set up address and data registers */
		EEAR = address & 0x1FF; /* Bit Masking */
  88:	91 70       	andi	r25, 0x01	; 1
  8a:	9f bb       	out	0x1f, r25	; 31
  8c:	8e bb       	out	0x1e, r24	; 30
		EEDR = data;
  8e:	6d bb       	out	0x1d, r22	; 29
		
		/* Write logical one to EEMWE */
		EECR |= (1<<EEMWE);
  90:	8c b3       	in	r24, 0x1c	; 28
  92:	84 60       	ori	r24, 0x04	; 4
  94:	8c bb       	out	0x1c, r24	; 28
		/* Start eeprom write by setting EEWE */
		EECR |= (1<<EEWE);
  96:	8c b3       	in	r24, 0x1c	; 28
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8c bb       	out	0x1c, r24	; 28
  9c:	08 95       	ret

0000009e <EEPROM_readByte>:
}

uint8_t EEPROM_readByte(uint16_t address) {
	
	/* Check for address as it must not exceed 511 and not be negative */
	if (address >= 0 && address <= 511)
  9e:	81 15       	cp	r24, r1
  a0:	22 e0       	ldi	r18, 0x02	; 2
  a2:	92 07       	cpc	r25, r18
  a4:	50 f4       	brcc	.+20     	; 0xba <EEPROM_readByte+0x1c>
	{
		/* Var to hold data */
		uint8_t ret_var = 0;
		
		/* Wait for completion of previous write */
		while(BIT_IS_SET(EECR,EEWE));
  a6:	e1 99       	sbic	0x1c, 1	; 28
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <EEPROM_readByte+0x8>
		
		/* Set up address register */
		EEAR = address & 0x1FF; /* Bit Masking */
  aa:	91 70       	andi	r25, 0x01	; 1
  ac:	9f bb       	out	0x1f, r25	; 31
  ae:	8e bb       	out	0x1e, r24	; 30
		/* Start eeprom read by writing EERE */
		EECR |= (1<<EERE);
  b0:	8c b3       	in	r24, 0x1c	; 28
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8c bb       	out	0x1c, r24	; 28
		/* Return data from data register */
	    ret_var = EEDR;
  b6:	8d b3       	in	r24, 0x1d	; 29
		return ret_var;
  b8:	08 95       	ret
	}
	else
	    return 0;
  ba:	80 e0       	ldi	r24, 0x00	; 0
}
  bc:	08 95       	ret

000000be <EEPROM_updateByte>:

void EEPROM_updateByte(uint16_t address , uint8_t data) {
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
	
	/* Check for address as it must not exceed 511 and not be negative */
	if ((address >= 0) && (address <= 511))
  c4:	81 15       	cp	r24, r1
  c6:	22 e0       	ldi	r18, 0x02	; 2
  c8:	92 07       	cpc	r25, r18
  ca:	50 f4       	brcc	.+20     	; 0xe0 <EEPROM_updateByte+0x22>
  cc:	16 2f       	mov	r17, r22
  ce:	ec 01       	movw	r28, r24
	{
		/* Check if data isn't eqaul it will overwrite */
		if (data != EEPROM_readByte(address))
  d0:	0e 94 4f 00 	call	0x9e	; 0x9e <EEPROM_readByte>
  d4:	81 17       	cp	r24, r17
  d6:	21 f0       	breq	.+8      	; 0xe0 <EEPROM_updateByte+0x22>
		{
			EEPROM_writeByte(address,data);
  d8:	61 2f       	mov	r22, r17
  da:	ce 01       	movw	r24, r28
  dc:	0e 94 3e 00 	call	0x7c	; 0x7c <EEPROM_writeByte>
		}
	}
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	1f 91       	pop	r17
  e6:	08 95       	ret

000000e8 <main>:

int main(void)
{
    /* Replace with your application code */
	
	EEPROM_writeByte(0x01,0x55);
  e8:	65 e5       	ldi	r22, 0x55	; 85
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 3e 00 	call	0x7c	; 0x7c <EEPROM_writeByte>
	EEPROM_updateByte(0x01,0xC8);
  f2:	68 ec       	ldi	r22, 0xC8	; 200
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_updateByte>
	eeprom_write_byte((uint8_t*)0x01,0xAA);
  fc:	6a ea       	ldi	r22, 0xAA	; 170
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 99 00 	call	0x132	; 0x132 <eeprom_write_byte>
	data1 = EEPROM_readByte(0x01);
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 4f 00 	call	0x9e	; 0x9e <EEPROM_readByte>
 10e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	EEPROM_writeByte(0x01,0x59);
 112:	69 e5       	ldi	r22, 0x59	; 89
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 3e 00 	call	0x7c	; 0x7c <EEPROM_writeByte>
	EEPROM_updateByte(0x01,0xBB);
 11c:	6b eb       	ldi	r22, 0xBB	; 187
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_updateByte>
	eeprom_write_byte((uint8_t*)0x01,0xEA);
 126:	6a ee       	ldi	r22, 0xEA	; 234
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 99 00 	call	0x132	; 0x132 <eeprom_write_byte>
 130:	ff cf       	rjmp	.-2      	; 0x130 <main+0x48>

00000132 <eeprom_write_byte>:
 132:	26 2f       	mov	r18, r22

00000134 <eeprom_write_r18>:
 134:	e1 99       	sbic	0x1c, 1	; 28
 136:	fe cf       	rjmp	.-4      	; 0x134 <eeprom_write_r18>
 138:	9f bb       	out	0x1f, r25	; 31
 13a:	8e bb       	out	0x1e, r24	; 30
 13c:	2d bb       	out	0x1d, r18	; 29
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	e2 9a       	sbi	0x1c, 2	; 28
 144:	e1 9a       	sbi	0x1c, 1	; 28
 146:	0f be       	out	0x3f, r0	; 63
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
